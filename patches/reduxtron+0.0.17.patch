diff --git a/node_modules/reduxtron/.DS_Store b/node_modules/reduxtron/.DS_Store
new file mode 100644
index 0000000..6965dd5
Binary files /dev/null and b/node_modules/reduxtron/.DS_Store differ
diff --git a/node_modules/reduxtron/dist/main.cjs b/node_modules/reduxtron/dist/main.cjs
deleted file mode 100644
index 861785c..0000000
--- a/node_modules/reduxtron/dist/main.cjs
+++ /dev/null
@@ -1,17 +0,0 @@
-'use strict';
-
-// utility to plug redux functions onto main ipc
-// this adds the subscribe and dispatch messages
-var mainReduxBridge = function (ipcMain, store) {
-    ipcMain.handle("getState", function () { return store.getState(); });
-    ipcMain.on("dispatch", function (_, action) {
-        return store.dispatch(action);
-    });
-    var unsubscribe = store.subscribe(function () {
-        return ipcMain.emit("subscribe", store.getState());
-    });
-    return { unsubscribe: unsubscribe };
-};
-
-exports.mainReduxBridge = mainReduxBridge;
-//# sourceMappingURL=main.cjs.map
diff --git a/node_modules/reduxtron/dist/main.cjs.map b/node_modules/reduxtron/dist/main.cjs.map
deleted file mode 100644
index 039aac6..0000000
--- a/node_modules/reduxtron/dist/main.cjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"main.cjs","sources":["../src/main.ts"],"sourcesContent":["import type { MainReduxBridge } from \"./types\";\n\n// utility to plug redux functions onto main ipc\n// this adds the subscribe and dispatch messages\nexport const mainReduxBridge: MainReduxBridge = (ipcMain, store) => {\n  ipcMain.handle(\"getState\", () => store.getState());\n  ipcMain.on(\n    \"dispatch\",\n    (_: unknown, action: Parameters<typeof store.dispatch>[0]) =>\n      store.dispatch(action),\n  );\n  const unsubscribe: () => void = store.subscribe(() =>\n    ipcMain.emit(\"subscribe\", store.getState()),\n  );\n  return { unsubscribe };\n};\n"],"names":[],"mappings":";;AAEA;AACA;AACa,IAAA,eAAe,GAAoB,UAAC,OAAO,EAAE,KAAK,EAAA;AAC7D,IAAA,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,YAAM,EAAA,OAAA,KAAK,CAAC,QAAQ,EAAE,CAAhB,EAAgB,CAAC,CAAC;IACnD,OAAO,CAAC,EAAE,CACR,UAAU,EACV,UAAC,CAAU,EAAE,MAA4C,EAAA;AACvD,QAAA,OAAA,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;AAAtB,KAAsB,CACzB,CAAC;AACF,IAAA,IAAM,WAAW,GAAe,KAAK,CAAC,SAAS,CAAC,YAAA;QAC9C,OAAA,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAA;AAA3C,KAA2C,CAC5C,CAAC;AACF,IAAA,OAAO,EAAE,WAAW,EAAA,WAAA,EAAE,CAAC;AACzB;;;;"}
\ No newline at end of file
diff --git a/node_modules/reduxtron/dist/main.d.cts b/node_modules/reduxtron/dist/main.d.cts
deleted file mode 100644
index 36f4da1..0000000
--- a/node_modules/reduxtron/dist/main.d.cts
+++ /dev/null
@@ -1,9 +0,0 @@
-import { IpcMain } from "electron";
-import { Store } from "redux";
-type MainReduxBridge = {
-    <S extends Store>(ipcMain: IpcMain, store: S): {
-        unsubscribe: () => void;
-    };
-};
-declare const mainReduxBridge: MainReduxBridge;
-export { mainReduxBridge };
diff --git a/node_modules/reduxtron/dist/main.d.ts b/node_modules/reduxtron/dist/main.d.ts
deleted file mode 100644
index 36f4da1..0000000
--- a/node_modules/reduxtron/dist/main.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-import { IpcMain } from "electron";
-import { Store } from "redux";
-type MainReduxBridge = {
-    <S extends Store>(ipcMain: IpcMain, store: S): {
-        unsubscribe: () => void;
-    };
-};
-declare const mainReduxBridge: MainReduxBridge;
-export { mainReduxBridge };
diff --git a/node_modules/reduxtron/dist/main.js b/node_modules/reduxtron/dist/main.js
deleted file mode 100644
index 108b9cf..0000000
--- a/node_modules/reduxtron/dist/main.js
+++ /dev/null
@@ -1,15 +0,0 @@
-// utility to plug redux functions onto main ipc
-// this adds the subscribe and dispatch messages
-var mainReduxBridge = function (ipcMain, store) {
-    ipcMain.handle("getState", function () { return store.getState(); });
-    ipcMain.on("dispatch", function (_, action) {
-        return store.dispatch(action);
-    });
-    var unsubscribe = store.subscribe(function () {
-        return ipcMain.emit("subscribe", store.getState());
-    });
-    return { unsubscribe: unsubscribe };
-};
-
-export { mainReduxBridge };
-//# sourceMappingURL=main.js.map
diff --git a/node_modules/reduxtron/dist/main.js.map b/node_modules/reduxtron/dist/main.js.map
deleted file mode 100644
index a6bd1f5..0000000
--- a/node_modules/reduxtron/dist/main.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"main.js","sources":["../src/main.ts"],"sourcesContent":["import type { MainReduxBridge } from \"./types\";\n\n// utility to plug redux functions onto main ipc\n// this adds the subscribe and dispatch messages\nexport const mainReduxBridge: MainReduxBridge = (ipcMain, store) => {\n  ipcMain.handle(\"getState\", () => store.getState());\n  ipcMain.on(\n    \"dispatch\",\n    (_: unknown, action: Parameters<typeof store.dispatch>[0]) =>\n      store.dispatch(action),\n  );\n  const unsubscribe: () => void = store.subscribe(() =>\n    ipcMain.emit(\"subscribe\", store.getState()),\n  );\n  return { unsubscribe };\n};\n"],"names":[],"mappings":"AAEA;AACA;AACa,IAAA,eAAe,GAAoB,UAAC,OAAO,EAAE,KAAK,EAAA;AAC7D,IAAA,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,YAAM,EAAA,OAAA,KAAK,CAAC,QAAQ,EAAE,CAAhB,EAAgB,CAAC,CAAC;IACnD,OAAO,CAAC,EAAE,CACR,UAAU,EACV,UAAC,CAAU,EAAE,MAA4C,EAAA;AACvD,QAAA,OAAA,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;AAAtB,KAAsB,CACzB,CAAC;AACF,IAAA,IAAM,WAAW,GAAe,KAAK,CAAC,SAAS,CAAC,YAAA;QAC9C,OAAA,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAA;AAA3C,KAA2C,CAC5C,CAAC;AACF,IAAA,OAAO,EAAE,WAAW,EAAA,WAAA,EAAE,CAAC;AACzB;;;;"}
\ No newline at end of file
diff --git a/node_modules/reduxtron/dist/preload.cjs b/node_modules/reduxtron/dist/preload.cjs
deleted file mode 100644
index 7bfc7c6..0000000
--- a/node_modules/reduxtron/dist/preload.cjs
+++ /dev/null
@@ -1,18 +0,0 @@
-'use strict';
-
-var preloadReduxBridge = function (ipcRenderer) { return ({
-    handlers: {
-        dispatch: function (action) { return ipcRenderer.send("dispatch", action); },
-        getState: function () { return ipcRenderer.invoke("getState"); },
-        subscribe: function (callback) {
-            var subscription = function (_, state) { return callback(state); };
-            ipcRenderer.on("subscribe", subscription);
-            return function () {
-                ipcRenderer.off("subscribe", subscription);
-            };
-        },
-    },
-}); };
-
-exports.preloadReduxBridge = preloadReduxBridge;
-//# sourceMappingURL=preload.cjs.map
diff --git a/node_modules/reduxtron/dist/preload.cjs.map b/node_modules/reduxtron/dist/preload.cjs.map
deleted file mode 100644
index c89921d..0000000
--- a/node_modules/reduxtron/dist/preload.cjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"preload.cjs","sources":["../src/preload.ts"],"sourcesContent":["import type { IpcRenderer } from \"electron\";\nimport type { AnyAction } from \"redux\";\nimport {\n  AnyState,\n  PreloadReduxBridge,\n  PreloadReduxBridgeReturn,\n} from \"./types\";\n\nexport const preloadReduxBridge: PreloadReduxBridge = <\n  S extends AnyState,\n  A extends AnyAction,\n>(\n  ipcRenderer: IpcRenderer,\n): PreloadReduxBridgeReturn<S, A> => ({\n  handlers: {\n    dispatch: (action) => ipcRenderer.send(\"dispatch\", action),\n    getState: () => ipcRenderer.invoke(\"getState\"),\n    subscribe: (callback) => {\n      const subscription = (_: unknown, state: S) => callback(state);\n      ipcRenderer.on(\"subscribe\", subscription);\n      return () => {\n        ipcRenderer.off(\"subscribe\", subscription);\n      };\n    },\n  },\n});\n"],"names":[],"mappings":";;IAQa,kBAAkB,GAAuB,UAIpD,WAAwB,EAAA,EACW,QAAC;AACpC,IAAA,QAAQ,EAAE;AACR,QAAA,QAAQ,EAAE,UAAC,MAAM,EAAA,EAAK,OAAA,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,GAAA;QAC1D,QAAQ,EAAE,YAAM,EAAA,OAAA,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA,EAAA;QAC9C,SAAS,EAAE,UAAC,QAAQ,EAAA;AAClB,YAAA,IAAM,YAAY,GAAG,UAAC,CAAU,EAAE,KAAQ,EAAA,EAAK,OAAA,QAAQ,CAAC,KAAK,CAAC,CAAA,EAAA,CAAC;AAC/D,YAAA,WAAW,CAAC,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;YAC1C,OAAO,YAAA;AACL,gBAAA,WAAW,CAAC,GAAG,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;AAC7C,aAAC,CAAC;SACH;AACF,KAAA;CACF,EAAC;;;;"}
\ No newline at end of file
diff --git a/node_modules/reduxtron/dist/preload.d.cts b/node_modules/reduxtron/dist/preload.d.cts
deleted file mode 100644
index 5eff7b7..0000000
--- a/node_modules/reduxtron/dist/preload.d.cts
+++ /dev/null
@@ -1,15 +0,0 @@
-import { IpcRenderer } from "electron";
-import { AnyAction } from "redux";
-type AnyState = Record<string, unknown>;
-type PreloadReduxBridgeReturn<S extends AnyState, A extends AnyAction> = {
-    handlers: {
-        dispatch: (action: A) => void;
-        getState: () => Promise<Partial<S>>;
-        subscribe: (callback: (newState: S) => void) => () => void;
-    };
-};
-type PreloadReduxBridge = {
-    <S extends AnyState, A extends AnyAction>(ipcRenderer: IpcRenderer): PreloadReduxBridgeReturn<S, A>;
-};
-declare const preloadReduxBridge: PreloadReduxBridge;
-export { preloadReduxBridge };
diff --git a/node_modules/reduxtron/dist/preload.d.ts b/node_modules/reduxtron/dist/preload.d.ts
deleted file mode 100644
index 5eff7b7..0000000
--- a/node_modules/reduxtron/dist/preload.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import { IpcRenderer } from "electron";
-import { AnyAction } from "redux";
-type AnyState = Record<string, unknown>;
-type PreloadReduxBridgeReturn<S extends AnyState, A extends AnyAction> = {
-    handlers: {
-        dispatch: (action: A) => void;
-        getState: () => Promise<Partial<S>>;
-        subscribe: (callback: (newState: S) => void) => () => void;
-    };
-};
-type PreloadReduxBridge = {
-    <S extends AnyState, A extends AnyAction>(ipcRenderer: IpcRenderer): PreloadReduxBridgeReturn<S, A>;
-};
-declare const preloadReduxBridge: PreloadReduxBridge;
-export { preloadReduxBridge };
diff --git a/node_modules/reduxtron/dist/preload.js b/node_modules/reduxtron/dist/preload.js
deleted file mode 100644
index cf25e1a..0000000
--- a/node_modules/reduxtron/dist/preload.js
+++ /dev/null
@@ -1,16 +0,0 @@
-var preloadReduxBridge = function (ipcRenderer) { return ({
-    handlers: {
-        dispatch: function (action) { return ipcRenderer.send("dispatch", action); },
-        getState: function () { return ipcRenderer.invoke("getState"); },
-        subscribe: function (callback) {
-            var subscription = function (_, state) { return callback(state); };
-            ipcRenderer.on("subscribe", subscription);
-            return function () {
-                ipcRenderer.off("subscribe", subscription);
-            };
-        },
-    },
-}); };
-
-export { preloadReduxBridge };
-//# sourceMappingURL=preload.js.map
diff --git a/node_modules/reduxtron/dist/preload.js.map b/node_modules/reduxtron/dist/preload.js.map
deleted file mode 100644
index 94620e4..0000000
--- a/node_modules/reduxtron/dist/preload.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"preload.js","sources":["../src/preload.ts"],"sourcesContent":["import type { IpcRenderer } from \"electron\";\nimport type { AnyAction } from \"redux\";\nimport {\n  AnyState,\n  PreloadReduxBridge,\n  PreloadReduxBridgeReturn,\n} from \"./types\";\n\nexport const preloadReduxBridge: PreloadReduxBridge = <\n  S extends AnyState,\n  A extends AnyAction,\n>(\n  ipcRenderer: IpcRenderer,\n): PreloadReduxBridgeReturn<S, A> => ({\n  handlers: {\n    dispatch: (action) => ipcRenderer.send(\"dispatch\", action),\n    getState: () => ipcRenderer.invoke(\"getState\"),\n    subscribe: (callback) => {\n      const subscription = (_: unknown, state: S) => callback(state);\n      ipcRenderer.on(\"subscribe\", subscription);\n      return () => {\n        ipcRenderer.off(\"subscribe\", subscription);\n      };\n    },\n  },\n});\n"],"names":[],"mappings":"IAQa,kBAAkB,GAAuB,UAIpD,WAAwB,EAAA,EACW,QAAC;AACpC,IAAA,QAAQ,EAAE;AACR,QAAA,QAAQ,EAAE,UAAC,MAAM,EAAA,EAAK,OAAA,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,GAAA;QAC1D,QAAQ,EAAE,YAAM,EAAA,OAAA,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA,EAAA;QAC9C,SAAS,EAAE,UAAC,QAAQ,EAAA;AAClB,YAAA,IAAM,YAAY,GAAG,UAAC,CAAU,EAAE,KAAQ,EAAA,EAAK,OAAA,QAAQ,CAAC,KAAK,CAAC,CAAA,EAAA,CAAC;AAC/D,YAAA,WAAW,CAAC,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;YAC1C,OAAO,YAAA;AACL,gBAAA,WAAW,CAAC,GAAG,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;AAC7C,aAAC,CAAC;SACH;AACF,KAAA;CACF,EAAC;;;;"}
\ No newline at end of file
diff --git a/node_modules/reduxtron/dist/types.cjs b/node_modules/reduxtron/dist/types.cjs
deleted file mode 100644
index 016aa11..0000000
--- a/node_modules/reduxtron/dist/types.cjs
+++ /dev/null
@@ -1,3 +0,0 @@
-'use strict';
-
-//# sourceMappingURL=types.cjs.map
diff --git a/node_modules/reduxtron/dist/types.cjs.map b/node_modules/reduxtron/dist/types.cjs.map
deleted file mode 100644
index c0c2ee5..0000000
--- a/node_modules/reduxtron/dist/types.cjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"types.cjs","sources":[],"sourcesContent":[],"names":[],"mappings":";;"}
\ No newline at end of file
diff --git a/node_modules/reduxtron/dist/types.d.cts b/node_modules/reduxtron/dist/types.d.cts
deleted file mode 100644
index 6241e18..0000000
--- a/node_modules/reduxtron/dist/types.d.cts
+++ /dev/null
@@ -1,19 +0,0 @@
-import { IpcMain, IpcRenderer } from "electron";
-import { Store, AnyAction } from "redux";
-type MainReduxBridge = {
-    <S extends Store>(ipcMain: IpcMain, store: S): {
-        unsubscribe: () => void;
-    };
-};
-type AnyState = Record<string, unknown>;
-type PreloadReduxBridgeReturn<S extends AnyState, A extends AnyAction> = {
-    handlers: {
-        dispatch: (action: A) => void;
-        getState: () => Promise<Partial<S>>;
-        subscribe: (callback: (newState: S) => void) => () => void;
-    };
-};
-type PreloadReduxBridge = {
-    <S extends AnyState, A extends AnyAction>(ipcRenderer: IpcRenderer): PreloadReduxBridgeReturn<S, A>;
-};
-export { MainReduxBridge, AnyState, PreloadReduxBridgeReturn, PreloadReduxBridge };
diff --git a/node_modules/reduxtron/dist/zustand-store.cjs b/node_modules/reduxtron/dist/zustand-store.cjs
deleted file mode 100644
index ca241ef..0000000
--- a/node_modules/reduxtron/dist/zustand-store.cjs
+++ /dev/null
@@ -1,18 +0,0 @@
-'use strict';
-
-var zustand = require('zustand');
-
-var createUseStore = function (bridge) {
-    return zustand.create(function (setState) {
-        // subscribe to changes
-        bridge.subscribe(setState);
-        // get initial state
-        bridge.getState().then(setState);
-        // we don’t need to fill it with state keys because they will all come from main
-        // we don’t need any actions because all the state updates also comes from main
-        return {};
-    });
-};
-
-exports.createUseStore = createUseStore;
-//# sourceMappingURL=zustand-store.cjs.map
diff --git a/node_modules/reduxtron/dist/zustand-store.cjs.map b/node_modules/reduxtron/dist/zustand-store.cjs.map
deleted file mode 100644
index 4e7c9ab..0000000
--- a/node_modules/reduxtron/dist/zustand-store.cjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"zustand-store.cjs","sources":["../src/zustand-store.ts"],"sourcesContent":["import { type StoreApi, type UseBoundStore, create } from \"zustand\";\nimport type { AnyAction } from \"redux\";\nimport type { PreloadReduxBridgeReturn, AnyState } from \"./types\";\n\nexport type CreateUseStore = {\n  <S extends AnyState, A extends AnyAction>(\n    bridge: PreloadReduxBridgeReturn<S, A>[\"handlers\"]\n  ): UseBoundStore<StoreApi<Partial<S>>>;\n};\n\nexport const createUseStore: CreateUseStore = <\n  S extends AnyState,\n  A extends AnyAction\n>(\n  bridge: PreloadReduxBridgeReturn<S, A>[\"handlers\"]\n): UseBoundStore<StoreApi<Partial<S>>> =>\n  create<Partial<S>>((setState) => {\n    // subscribe to changes\n    bridge.subscribe(setState);\n    // get initial state\n    bridge.getState().then(setState);\n\n    // we don’t need to fill it with state keys because they will all come from main\n    // we don’t need any actions because all the state updates also comes from main\n    return {};\n  });\n"],"names":["create"],"mappings":";;;;AAUO,IAAM,cAAc,GAAmB,UAI5C,MAAkD,EAAA;IAElD,OAAAA,cAAM,CAAa,UAAC,QAAQ,EAAA;;AAE1B,QAAA,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;;QAE3B,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;;AAIjC,QAAA,OAAO,EAAE,CAAC;AACZ,KAAC,CAAC,CAAA;AATF;;;;"}
\ No newline at end of file
diff --git a/node_modules/reduxtron/dist/zustand-store.d.cts b/node_modules/reduxtron/dist/zustand-store.d.cts
deleted file mode 100644
index 49ee61f..0000000
--- a/node_modules/reduxtron/dist/zustand-store.d.cts
+++ /dev/null
@@ -1,15 +0,0 @@
-import { StoreApi, UseBoundStore } from "zustand";
-import { AnyAction } from "redux";
-type AnyState = Record<string, unknown>;
-type PreloadReduxBridgeReturn<S extends AnyState, A extends AnyAction> = {
-    handlers: {
-        dispatch: (action: A) => void;
-        getState: () => Promise<Partial<S>>;
-        subscribe: (callback: (newState: S) => void) => () => void;
-    };
-};
-type CreateUseStore = {
-    <S extends AnyState, A extends AnyAction>(bridge: PreloadReduxBridgeReturn<S, A>["handlers"]): UseBoundStore<StoreApi<Partial<S>>>;
-};
-declare const createUseStore: CreateUseStore;
-export { CreateUseStore, createUseStore };
diff --git a/node_modules/reduxtron/dist/zustand-store.d.ts b/node_modules/reduxtron/dist/zustand-store.d.ts
deleted file mode 100644
index 49ee61f..0000000
--- a/node_modules/reduxtron/dist/zustand-store.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import { StoreApi, UseBoundStore } from "zustand";
-import { AnyAction } from "redux";
-type AnyState = Record<string, unknown>;
-type PreloadReduxBridgeReturn<S extends AnyState, A extends AnyAction> = {
-    handlers: {
-        dispatch: (action: A) => void;
-        getState: () => Promise<Partial<S>>;
-        subscribe: (callback: (newState: S) => void) => () => void;
-    };
-};
-type CreateUseStore = {
-    <S extends AnyState, A extends AnyAction>(bridge: PreloadReduxBridgeReturn<S, A>["handlers"]): UseBoundStore<StoreApi<Partial<S>>>;
-};
-declare const createUseStore: CreateUseStore;
-export { CreateUseStore, createUseStore };
diff --git a/node_modules/reduxtron/dist/zustand-store.js b/node_modules/reduxtron/dist/zustand-store.js
deleted file mode 100644
index 3f3f647..0000000
--- a/node_modules/reduxtron/dist/zustand-store.js
+++ /dev/null
@@ -1,16 +0,0 @@
-import { create } from 'zustand';
-
-var createUseStore = function (bridge) {
-    return create(function (setState) {
-        // subscribe to changes
-        bridge.subscribe(setState);
-        // get initial state
-        bridge.getState().then(setState);
-        // we don’t need to fill it with state keys because they will all come from main
-        // we don’t need any actions because all the state updates also comes from main
-        return {};
-    });
-};
-
-export { createUseStore };
-//# sourceMappingURL=zustand-store.js.map
diff --git a/node_modules/reduxtron/dist/zustand-store.js.map b/node_modules/reduxtron/dist/zustand-store.js.map
deleted file mode 100644
index 0565e5b..0000000
--- a/node_modules/reduxtron/dist/zustand-store.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"zustand-store.js","sources":["../src/zustand-store.ts"],"sourcesContent":["import { type StoreApi, type UseBoundStore, create } from \"zustand\";\nimport type { AnyAction } from \"redux\";\nimport type { PreloadReduxBridgeReturn, AnyState } from \"./types\";\n\nexport type CreateUseStore = {\n  <S extends AnyState, A extends AnyAction>(\n    bridge: PreloadReduxBridgeReturn<S, A>[\"handlers\"]\n  ): UseBoundStore<StoreApi<Partial<S>>>;\n};\n\nexport const createUseStore: CreateUseStore = <\n  S extends AnyState,\n  A extends AnyAction\n>(\n  bridge: PreloadReduxBridgeReturn<S, A>[\"handlers\"]\n): UseBoundStore<StoreApi<Partial<S>>> =>\n  create<Partial<S>>((setState) => {\n    // subscribe to changes\n    bridge.subscribe(setState);\n    // get initial state\n    bridge.getState().then(setState);\n\n    // we don’t need to fill it with state keys because they will all come from main\n    // we don’t need any actions because all the state updates also comes from main\n    return {};\n  });\n"],"names":[],"mappings":";;AAUO,IAAM,cAAc,GAAmB,UAI5C,MAAkD,EAAA;IAElD,OAAA,MAAM,CAAa,UAAC,QAAQ,EAAA;;AAE1B,QAAA,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;;QAE3B,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;;AAIjC,QAAA,OAAO,EAAE,CAAC;AACZ,KAAC,CAAC,CAAA;AATF;;;;"}
\ No newline at end of file
diff --git a/node_modules/reduxtron/dist/main.ts b/node_modules/reduxtron/main.ts
similarity index 100%
rename from node_modules/reduxtron/dist/main.ts
rename to node_modules/reduxtron/main.ts
diff --git a/node_modules/reduxtron/package.json b/node_modules/reduxtron/package.json
index 261de98..c9dcbe4 100644
--- a/node_modules/reduxtron/package.json
+++ b/node_modules/reduxtron/package.json
@@ -4,42 +4,8 @@
   "author": "vitordino",
   "license": "MIT",
   "files": [
-    "dist"
+    "."
   ],
-  "exports": {
-    "./types": {
-      "types": "./dist/types.d.ts",
-      "module": "./dist/types.js",
-      "import": "./dist/types.js",
-      "require": "./dist/types.cjs",
-      "default": "./dist/types.js"
-    },
-    "./main": {
-      "types": "./dist/main.d.ts",
-      "module": "./dist/main.js",
-      "import": "./dist/main.js",
-      "require": "./dist/main.cjs",
-      "default": "./dist/main.js"
-    },
-    "./preload": {
-      "types": "./dist/preload.d.ts",
-      "module": "./dist/preload.js",
-      "import": "./dist/preload.js",
-      "require": "./dist/preload.cjs",
-      "default": "./dist/preload.js"
-    },
-    "./zustand-store": {
-      "types": "./dist/zustand-store.d.ts",
-      "module": "./dist/zustand-store.js",
-      "import": "./dist/zustand-store.js",
-      "require": "./dist/zustand-store.cjs",
-      "default": "./dist/zustand-store.js"
-    }
-  },
-  "scripts": {
-    "build": "rm -rf ./dist && rollup --config rollup.config.mjs && cpy src/*.ts dist --flat",
-    "release": "npm run build && npm publish"
-  },
   "sideEffects": false,
   "peerDependencies": {
     "electron": ">=24 || >=25 || >=26",
diff --git a/node_modules/reduxtron/dist/preload.ts b/node_modules/reduxtron/preload.ts
similarity index 100%
rename from node_modules/reduxtron/dist/preload.ts
rename to node_modules/reduxtron/preload.ts
diff --git a/node_modules/reduxtron/dist/types.ts b/node_modules/reduxtron/types.ts
similarity index 100%
rename from node_modules/reduxtron/dist/types.ts
rename to node_modules/reduxtron/types.ts
diff --git a/node_modules/reduxtron/dist/zustand-store.ts b/node_modules/reduxtron/zustand-store.ts
similarity index 100%
rename from node_modules/reduxtron/dist/zustand-store.ts
rename to node_modules/reduxtron/zustand-store.ts
